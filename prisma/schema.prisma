// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Note that some adapters may set a maximum length for the String type by default, please ensure your strings are long
// enough when changing adapters.
// See https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string for more information
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model manSession {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model Store {
  id          Int     @id @default(autoincrement())
  shopDomain  String  @unique
  accessToken String
  fbUserId    Int?
  fbUser      FbUser? @relation(fields: [fbUserId], references: [id])
}


model FbUser {
  id              Int      @id @default(autoincrement())
  name            String
  facebookUserId  String   @unique
  accessToken     String
  pages           Page[]
  stores          Store[]
}

model Page {
  id              Int      @id @default(autoincrement())
  pageId          String   @unique
  pageName        String
  pageAccessToken String
  fbUserId        Int
  fbUser          FbUser   @relation(fields: [fbUserId], references: [id])
  messages        Message[]
}

model Message {
  id         Int      @id @default(autoincrement())
  pageId     Int
  senderId   String
  content    String
  direction  String
  timestamp  DateTime @default(now())
  page       Page     @relation(fields: [pageId], references: [id])
}

model WhatsAppMessage {
  id        String   @id @default(cuid())
  from      String
  text      String
  timestamp DateTime @default(now())
}
model ChatSession {
  id        Int          @id @default(autoincrement())
  userId    String
  userName  String
  phone     String       @unique
  messages  ChatMessage[]
  createdAt DateTime     @default(now())
}

model ChatMessage {
  id             Int         @id @default(autoincrement())
  conversationId Int
  content        String
  sender         String
  createdAt      DateTime    @default(now())

  conversation   ChatSession @relation(fields: [conversationId], references: [id])
}


model CustomerWhatsAppMessage {
  id                String   @id @default(cuid())
  from              String
  to                String
  message           String
  timestamp         DateTime
  direction         String
  platformMessageId String?  @unique
  localId           String?  @unique
}


model StoreChatMessage {
  id           Int      @id @default(autoincrement())
  storeDomain  String
  sessionId    String
  sender       String
  name         String?   // new field
  text         String?   // make optional
  fileUrl      String?
  fileName     String?
  createdAt    DateTime  @default(now())

  @@index([storeDomain, sessionId, createdAt])
  @@map("store_chat_messages")
}



model StoreChatSession {
  id           Int      @id @default(autoincrement())
  storeDomain  String
  sessionId    String   @unique
  createdAt    DateTime @default(now())
  lastSeenAt   DateTime @updatedAt

  @@map("store_chat_sessions") // database table name
}
