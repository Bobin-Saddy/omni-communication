<div id="oc-chat" 
     data-store="{{ shop.permanent_domain }}" 
     data-endpoint="https://omnichannel-communication-3d7329b35a37.herokuapp.com/api/chat" 
     class="oc-chat-wrap" 
     style="all: initial;">

  <style>
    /* ---------- Chat Button ---------- */
    .oc-chat-toggle { position: fixed; right: 20px; bottom: 20px; background: #2563eb; color: #fff; border-radius: 50%; width: 40px; height: 40px; display: flex; align-items: center; justify-content: center; font-size: 20px; cursor: pointer; box-shadow: 0 8px 20px rgba(0,0,0,0.25); transition: transform 0.3s ease; z-index: 99999; }
    .oc-chat-toggle:hover { transform: scale(1.1); }

    .oc-chat-container { position: fixed; right: -10%; bottom: 90px; width: 340px; max-height: 70vh; display: flex; flex-direction: column; background: #fff; border-radius: 16px; box-shadow: 0 10px 30px rgba(0,0,0,.2); font-family: system-ui; overflow: hidden; transform: translateY(120%); opacity: 0; pointer-events: none; transition: all 0.35s ease; z-index: 99999; }
    .oc-chat-container.open { transform: translateY(0); opacity: 1; pointer-events: auto; }

    .oc-chat-header { padding: 8px 14px; font-weight: 600; font-size: 15px; background: {{ block.settings.header_bg | default: "#111827" }}; color: {{ block.settings.header_fg | default: "#ffffff" }}; display: flex; align-items: center; justify-content: space-between; }
    .oc-chat-header span { display: flex; align-items: center; gap: 6px; }
    .oc-chat-header span::before { content: "ðŸ’¬"; font-size: 18px; }
    .oc-close-btn { background: transparent; border: none; color: #fff; font-size: 30px; cursor: pointer; line-height: 1; }

    .oc-chat-messages { padding: 12px; overflow-y: auto; flex: 1; background: #f9fafb; }
    .oc-bubble { max-width: max-content; padding: 10px 14px; border-radius: 16px; margin: 8px 0; font-size: 14px; line-height: 1.4; word-break: break-word; animation: fadeInUp 0.25s ease; }
    .oc-me   { background: #2563eb; color: #fff; margin-left: auto; border-bottom-right-radius: 4px; }
    .oc-them { background: #e5e7eb; color: #111; margin-right: auto; border-bottom-left-radius: 4px; }
    .oc-file-bubble img { max-width: 200px; border-radius: 8px; display: block; }

    @keyframes fadeInUp { from { opacity: 0; transform: translateY(8px); } to { opacity: 1; transform: translateY(0); } }

    .oc-chat-input { display: flex; gap: 6px; border-top: 1px solid #eee; padding: 10px; background: #fff; align-items: center; }
    .oc-chat-input input[type="text"] { flex: 1; border: 1px solid #ddd; border-radius: 12px; padding: 10px; outline: none; font-size: 14px; }
    .oc-chat-input button { border: none; border-radius: 12px; padding: 10px 14px; cursor: pointer; background: {{ block.settings.btn_bg | default: "#2563eb" }}; color: {{ block.settings.btn_fg | default: "#ffffff" }}; font-weight: 600; transition: background 0.3s ease; }
    .oc-chat-input button:hover { background: #1d4ed8; }
  </style>

  <button class="oc-chat-toggle" aria-label="Open chat">ðŸ’¬</button>

  <div class="oc-chat-container">
    <div class="oc-chat-header">
      <span>{{ block.settings.header_title | default: "Need help? Chat with us!" }}</span>
      <button class="oc-close-btn" aria-label="Close chat">Ã—</button>
    </div>

    <div class="oc-chat-messages"></div>

    <div class="oc-chat-input">
      <label class="oc-upload-btn" title="Attach file">
        ðŸ“Ž
        <input type="file" id="oc-file-input" hidden accept="image/*,.pdf,.doc,.docx,.txt" />
      </label>
      <input type="text" placeholder="{{ block.settings.placeholder | default: 'Type your messageâ€¦' }}" />
      <button type="button">{{ block.settings.send_label | default: "Send" }}</button>
    </div>
  </div>

<script>
(function(){
  const root = document.currentScript.closest('#oc-chat');
  const store = root.dataset.store;
  const endpoint = root.dataset.endpoint;

  const btnToggle = root.querySelector('.oc-chat-toggle');
  const panel = root.querySelector('.oc-chat-container');
  const closeBtn = root.querySelector('.oc-close-btn');
  const list = root.querySelector('.oc-chat-messages');
  const input = root.querySelector('.oc-chat-input input[type="text"]');
  const sendBtn = root.querySelector('.oc-chat-input button');
  const fileInput = root.querySelector('#oc-file-input');

  const sidKey = 'oc_chat_sid';
  function uuid() { return 'xxxxxxxyxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, c => { const r = Math.random()*16|0, v = c==='x'?r:(r&0x3|0x8); return v.toString(16); }); }
  let SID = localStorage.getItem(sidKey);
  if (!SID) { SID = uuid(); localStorage.setItem(sidKey, SID); }

  btnToggle.addEventListener('click', ()=> { panel.classList.add('open'); list.scrollTop=list.scrollHeight; });
  closeBtn.addEventListener('click', ()=> panel.classList.remove('open'));

  const renderedIds = new Set();
  let lastISO = null;

  function appendBubble(text, sender, id, forceScroll=false){
    if(id && renderedIds.has(id)) return;
    if(id) renderedIds.add(id);
    const b = document.createElement('div');
    b.className = sender==='customer'?'oc-bubble oc-me':'oc-bubble oc-them';
    b.textContent = text;
    list.appendChild(b);
    if(forceScroll) list.scrollTop=list.scrollHeight;
  }

function appendFileBubble(imgUrl, fileName, sender, id, forceScroll = false) {
  if (id && renderedIds.has(id)) return;
  if (id) renderedIds.add(id);
  const b = document.createElement('div');
  b.className = sender === 'customer' ? 'oc-bubble oc-me oc-file-bubble' : 'oc-bubble oc-them oc-file-bubble';

  if (imgUrl) {
    const img = document.createElement('img');
    img.src = imgUrl;
    b.appendChild(img);
  } else if (fileName) {
    const link = document.createElement('a');
    link.href = "#";
    link.textContent = fileName;
    b.appendChild(link);
  }

  b.dataset.id = id; // optional, for updating later
  list.appendChild(b);
  if (forceScroll || isNearBottom()) scrollToBottom(true);
}


  async function sendMessage(){
    const msg = (input.value||'').trim();
    if(!msg) return;
    const localId='local-'+Date.now();
    appendBubble(msg,'customer',localId,true);
    input.value='';
    try{
      const res = await fetch(endpoint,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({storeDomain:store,sessionId:SID,sender:'customer',message:msg})});
      const data = await res.json().catch(()=>null);
      if(data && data.ok && data.message){ if(data.message.id) renderedIds.add(data.message.id); if(data.message.createdAt) lastISO=data.message.createdAt; }
    }catch(e){ console.warn('send error', e); }
  }
  sendBtn.addEventListener('click', sendMessage);
  input.addEventListener('keydown', e=>{if(e.key==='Enter')sendMessage();});

fileInput.addEventListener('change', async () => {
  const file = fileInput.files[0];
  if (!file) return;

  let localId = 'file-' + Date.now();

  // Show temporary preview
  if (file.type.startsWith("image/")) {
    appendFileBubble(URL.createObjectURL(file), null, 'customer', localId, true);
  } else {
    appendFileBubble(null, file.name, 'customer', localId, true);
  }

  try {
const formData = new FormData();
formData.append('file', file);
formData.append('storeDomain', store);
formData.append('sessionId', SID);
formData.append('sender', 'customer');

const res = await fetch(endpoint, { method: 'POST', body: formData });

    const data = await res.json().catch(() => null);

    if (data && data.ok && data.message) {
      // Replace temporary preview with real uploaded image
      const bubble = document.querySelector(`.oc-bubble[data-id="${localId}"]`);
      if (bubble) {
        bubble.innerHTML = '';
        if (data.message.fileUrl) {
          const img = document.createElement('img');
          img.src = data.message.fileUrl;
          bubble.appendChild(img);
        } else if (data.message.fileName) {
          const link = document.createElement('a');
          link.href = "#";
          link.textContent = data.message.fileName;
          bubble.appendChild(link);
        }
      }

      if (data.message.id) renderedIds.add(data.message.id);
      if (data.message.createdAt) lastISO = data.message.createdAt;
    }
  } catch (e) {
    console.warn('upload error', e);
  }

  fileInput.value = '';
});

  async function poll(){
    try{
      const url = new URL(endpoint);
      url.searchParams.set('storeDomain', store);
      url.searchParams.set('sessionId', SID);
      if(lastISO) url.searchParams.set('since', lastISO);
      const r = await fetch(url.toString());
      const data = await r.json();
      if(data && data.ok && Array.isArray(data.messages) && data.messages.length){
        const userNearBottom=list.scrollTop+list.clientHeight >= list.scrollHeight-48;
        data.messages.forEach(m=>{
          const mid=m.id??m.createdAt;
          if(m.fileUrl) appendFileBubble(m.fileUrl,null,m.sender==='customer'?'customer':'me',mid,false);
          else appendBubble(m.text,m.sender==='customer'?'customer':'me',mid,false);
          lastISO=m.createdAt;
        });
        if(!userNearBottom) console.log('New messages');
      }
    }catch(e){console.warn(e);}
  }

  (async function init(){
    const url=new URL(endpoint); url.searchParams.set('storeDomain', store); url.searchParams.set('sessionId', SID);
    const r=await fetch(url.toString()); const data=await r.json();
    if(data && data.ok && Array.isArray(data.messages)){
      data.messages.forEach(m=>{
        const mid=m.id??m.createdAt;
        if(m.fileUrl) appendFileBubble(m.fileUrl,null,m.sender==='customer'?'customer':'me',mid,false);
        else appendBubble(m.text,m.sender==='customer'?'customer':'me',mid,false);
      });
      if(data.messages.length) lastISO=data.messages[data.messages.length-1].createdAt;
      list.scrollTop=list.scrollHeight;
    }
    setInterval(poll,3000);
  })();

})();
</script>

</div>


{% schema %}
{
  "name": "Omni Chat Widget",
  "target": "section",
  "settings": [
    { "type": "text", "id": "header_title", "label": "Header title", "default": "Need help? Chat with us!" },
    { "type": "text", "id": "toggle_label", "label": "Floating button label", "default": "Chat" },
    { "type": "text", "id": "placeholder", "label": "Input placeholder", "default": "Type your messageâ€¦" },
    { "type": "color", "id": "header_bg", "label": "Header background", "default": "#111827" },
    { "type": "color", "id": "header_fg", "label": "Header text color", "default": "#ffffff" },
    { "type": "color", "id": "btn_bg", "label": "Send/Button background", "default": "#2563eb" },
    { "type": "color", "id": "btn_fg", "label": "Send/Button text", "default": "#ffffff" }
  ]
}
{% endschema %}
