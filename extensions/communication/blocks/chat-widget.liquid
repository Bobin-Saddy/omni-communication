<div id="oc-chat" data-store="{{ shop.domain }}" data-endpoint="https://omnichannel-communication-3d7329b35a37.herokuapp.com/api/chat" class="oc-chat-wrap" style="all: initial;">
  <style>
    .oc-chat-container { position: fixed; right: 16px; bottom: 16px; width: 320px; max-height: 60vh; display:flex; flex-direction:column; background:#fff; border:1px solid #e5e5e5; border-radius:16px; box-shadow:0 10px 30px rgba(0,0,0,.1); font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, 'Helvetica Neue', Arial; }
    .oc-chat-header { padding:12px 14px; font-weight:600; font-size:14px; background: {{ block.settings.header_bg | default: "#111827" }}; color: {{ block.settings.header_fg | default: "#ffffff" }}; border-top-left-radius:16px; border-top-right-radius:16px; }
    .oc-chat-messages { padding:12px; overflow:auto; flex:1; }
    .oc-chat-input { display:flex; gap:8px; border-top:1px solid #eee; padding:10px; }
    .oc-chat-input input { flex:1; border:1px solid #ddd; border-radius:12px; padding:10px; outline:none; }
    .oc-chat-input button { border:none; border-radius:12px; padding:10px 14px; cursor:pointer; background: {{ block.settings.btn_bg | default: "#2563eb" }}; color: {{ block.settings.btn_fg | default: "#ffffff" }}; font-weight:600; }
    .oc-bubble { max-width: 80%; padding:8px 10px; border-radius:12px; margin:6px 0; font-size:14px; line-height:1.3; word-break: break-word; }
    .oc-me { background:#e6f2ff; margin-left:auto; border-bottom-right-radius:4px; }
    .oc-them { background:#f3f4f6; margin-right:auto; border-bottom-left-radius:4px; }
    .oc-chat-toggle { position:fixed; right:16px; bottom:16px; background: {{ block.settings.btn_bg | default: "#2563eb" }}; color: {{ block.settings.btn_fg | default: "#ffffff" }}; border:none; border-radius:999px; padding:12px 16px; font-weight:700; cursor:pointer; box-shadow:0 10px 30px rgba(0,0,0,.15); }
    .oc-hidden { display:none; }
  </style>

  <button class="oc-chat-toggle" aria-label="Open chat">{{ block.settings.toggle_label | default: "Chat" }}</button>
  <div class="oc-chat-container oc-hidden">
    <div class="oc-chat-header">{{ block.settings.header_title | default: "Need help? Chat with us!" }}</div>
    <div class="oc-chat-messages"></div>
    <div class="oc-chat-input">
      <input type="text" placeholder="{{ block.settings.placeholder | default: 'Type your message…' }}" />
      <button type="button">{{ block.settings.send_label | default: "Send" }}</button>
    </div>
  </div>

<script>
(function(){
  const root = document.currentScript.closest('#oc-chat');
  const store = root.dataset.store;
  const endpoint = root.dataset.endpoint;

  const btnToggle = root.querySelector('.oc-chat-toggle');
  const panel = root.querySelector('.oc-chat-container');
  const list = root.querySelector('.oc-chat-messages');
  const input = root.querySelector('.oc-chat-input input');
  const sendBtn = root.querySelector('.oc-chat-input button');

  // session id for this browser
  const sidKey = 'oc_chat_sid';
  function uuid() { return 'xxxxxxxyxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, c => { const r = Math.random()*16|0, v = c === 'x' ? r : (r&0x3|0x8); return v.toString(16); }); }
  let SID = localStorage.getItem(sidKey);
  if (!SID) { SID = uuid(); localStorage.setItem(sidKey, SID); }

  // UI toggle
  btnToggle.addEventListener('click', ()=> {
    panel.classList.toggle('oc-hidden');
    btnToggle.classList.toggle('oc-hidden');
  });

  function appendBubble(text, sender){
    const b = document.createElement('div');
    if(sender === 'customer'){
      b.className = 'oc-bubble oc-me';
    } else {
      b.className = 'oc-bubble oc-them';
    }
    b.textContent = text;
    list.appendChild(b);
    list.scrollTop = list.scrollHeight;
  }

  // send message
  async function sendMessage(){
    const msg = (input.value || '').trim();
    if(!msg) return;
    appendBubble(msg, 'customer');  // mark as customer
    input.value = '';
    try {
      await fetch(endpoint, {
        method: 'POST',
        headers: {'Content-Type':'application/json'},
        body: JSON.stringify({
          storeDomain: store,
          sessionId: SID,
          sender: 'customer',  // send customer to backend
          message: msg
        })
      });
    } catch(e){ console.warn('send error', e); }
  }

  sendBtn.addEventListener('click', sendMessage);
  input.addEventListener('keydown', e => { if(e.key === 'Enter') sendMessage(); });

  // poll messages
  let lastISO = null;
  async function poll(){
    try {
      const url = new URL(endpoint);
      url.searchParams.set('storeDomain', store);
      url.searchParams.set('sessionId', SID);
      if(lastISO) url.searchParams.set('since', lastISO);
      const r = await fetch(url.toString());
      const data = await r.json();
      if(data && data.ok && Array.isArray(data.messages)){
        data.messages.forEach(m => {
          if(!lastISO || m.sender === 'me' || m.sender === 'customer'){
            appendBubble(m.text, m.sender === 'customer' ? 'customer' : 'owner');
          }
          lastISO = m.createdAt;
        });
      }
    } catch(e){ console.warn(e); }
  }

  // init
  (async function init(){
    const url = new URL(endpoint);
    url.searchParams.set('storeDomain', store);
    url.searchParams.set('sessionId', SID);
    const r = await fetch(url.toString());
    const data = await r.json();
    if(data && data.ok && Array.isArray(data.messages)){
      data.messages.forEach(m => appendBubble(m.text, m.sender === 'customer' ? 'customer' : 'owner'));
      if(data.messages.length) lastISO = data.messages[data.messages.length-1].createdAt;
    }
    setInterval(poll, 3000);
  })();
})();
</script>

</div>


{% schema %}
{
  "name": "Omni Chat Widget",
  "target": "section",
  "settings": [
    { "type": "text", "id": "header_title", "label": "Header title", "default": "Need help? Chat with us!" },
    { "type": "text", "id": "toggle_label", "label": "Floating button label", "default": "Chat" },
    { "type": "text", "id": "placeholder", "label": "Input placeholder", "default": "Type your message…" },
    { "type": "color", "id": "header_bg", "label": "Header background", "default": "#111827" },
    { "type": "color", "id": "header_fg", "label": "Header text color", "default": "#ffffff" },
    { "type": "color", "id": "btn_bg", "label": "Send/Button background", "default": "#2563eb" },
    { "type": "color", "id": "btn_fg", "label": "Send/Button text", "default": "#ffffff" }
  ]
}
{% endschema %}
