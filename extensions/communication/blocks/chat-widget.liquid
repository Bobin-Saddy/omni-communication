<div id="oc-chat" 
     data-store="{{ shop.permanent_domain }}" 
     data-endpoint="https://omnichannel-communication-3d7329b35a37.herokuapp.com/api/chat" 
     class="oc-chat-wrap" 
     style="all: initial;">


  <style>
    /* ---------- Chat Button ---------- */
    .oc-chat-toggle {
      position: fixed;
      right: 20px;
      bottom: 20px;
      background: {{ block.settings.btn_bg | default: "#2563eb" }};
      color: {{ block.settings.btn_fg | default: "#ffffff" }};
      border: none;
      border-radius: 50%;
      width: 60px;
      height: 60px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 22px;
      cursor: pointer;
      box-shadow: 0 8px 20px rgba(0,0,0,0.25);
      transition: transform 0.3s ease;
      z-index: 99999;
    }
    .oc-chat-toggle:hover { transform: scale(1.1); }

    /* ---------- Chat Container ---------- */
    .oc-chat-container {
      position: fixed;
      right: 20px;
      bottom: 90px;
      width: 340px;
      max-height: 70vh;
      display: flex;
      flex-direction: column;
      background: #fff;
      border-radius: 16px;
      box-shadow: 0 10px 30px rgba(0,0,0,.2);
      font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, 'Helvetica Neue', Arial;
      overflow: hidden;
      transform: translateY(120%);
      opacity: 0;
      pointer-events: none;
      transition: all 0.35s ease;
      z-index: 99999;
    }
    .oc-chat-container.open {
      transform: translateY(0);
      opacity: 1;
      pointer-events: auto;
    }

    /* ---------- Header ---------- */
    .oc-chat-header {
      padding: 14px;
      font-weight: 600;
      font-size: 15px;
      background: {{ block.settings.header_bg | default: "#111827" }};
      color: {{ block.settings.header_fg | default: "#ffffff" }};
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    .oc-chat-header span {
      display: flex; align-items: center; gap: 6px;
    }
    .oc-chat-header span::before { content: "ðŸ’¬"; font-size: 18px; }
    .oc-close-btn {
      background: transparent; border: none; color: #fff;
      font-size: 18px; cursor: pointer; line-height: 1;
    }

    /* ---------- Messages ---------- */
    .oc-chat-messages {
      padding: 12px;
      overflow-y: auto;
      flex: 1;
      background: #f9fafb;
    }
    .oc-bubble {
      max-width: 80%;
      padding: 10px 14px;
      border-radius: 16px;
      margin: 8px 0;
      font-size: 14px;
      line-height: 1.4;
      word-break: break-word;
      animation: fadeInUp 0.25s ease;
    }
    .oc-me   { background: #2563eb; color: #fff;  margin-left: auto;  border-bottom-right-radius: 4px; }
    .oc-them { background: #e5e7eb; color: #111; margin-right: auto; border-bottom-left-radius: 4px; }

    @keyframes fadeInUp {
      from { opacity: 0; transform: translateY(8px); }
      to   { opacity: 1; transform: translateY(0); }
    }

    /* ---------- Input ---------- */
    .oc-chat-input {
      display: flex; gap: 8px; border-top: 1px solid #eee; padding: 10px; background: #fff;
    }
    .oc-chat-input input {
      flex: 1; border: 1px solid #ddd; border-radius: 12px; padding: 10px; outline: none; font-size: 14px;
    }
    .oc-chat-input button {
      border: none; border-radius: 12px; padding: 10px 14px; cursor: pointer;
      background: {{ block.settings.btn_bg | default: "#2563eb" }};
      color: {{ block.settings.btn_fg | default: "#ffffff" }}; font-weight: 600; transition: background 0.3s ease;
    }
    .oc-chat-input button:hover { background: #1d4ed8; }

    /* ---------- New Messages Pill ---------- */
    .oc-new-pill {
      position: absolute;
      left: 50%;
      transform: translateX(-50%);
      bottom: 60px; /* sits above input */
      padding: 6px 10px;
      border-radius: 999px;
      border: 1px solid #e5e7eb;
      background: #ffffff;
      box-shadow: 0 6px 20px rgba(0,0,0,.12);
      font-size: 12px;
      font-weight: 600;
      cursor: pointer;
      display: none;
    }
  </style>

  <!-- Floating Button -->
  <button class="oc-chat-toggle" aria-label="Open chat">ðŸ’¬</button>

  <!-- Chat Window -->
  <div class="oc-chat-container">
    <div class="oc-chat-header">
      <span>{{ block.settings.header_title | default: "Need help? Chat with us!" }}</span>
      <button class="oc-close-btn" aria-label="Close chat">Ã—</button>
    </div>

    <div class="oc-chat-messages"></div>
    <button type="button" class="oc-new-pill">New messages â†“</button>

    <div class="oc-chat-input">
      <input type="text" placeholder="{{ block.settings.placeholder | default: 'Type your messageâ€¦' }}" />
      <button type="button">{{ block.settings.send_label | default: "Send" }}</button>
    </div>
  </div>

<script>
(function(){
  const root     = document.currentScript.closest('#oc-chat');
  const store    = root.dataset.store;
  const endpoint = root.dataset.endpoint;

  const btnToggle = root.querySelector('.oc-chat-toggle');
  const panel     = root.querySelector('.oc-chat-container');
  const closeBtn  = root.querySelector('.oc-close-btn');
  const list      = root.querySelector('.oc-chat-messages');
  const input     = root.querySelector('.oc-chat-input input');
  const sendBtn   = root.querySelector('.oc-chat-input button');
  const newPill   = root.querySelector('.oc-new-pill');

  /* -------- Session -------- */
  const sidKey = 'oc_chat_sid';
  function uuid() {
    return 'xxxxxxxyxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, c => {
      const r = Math.random()*16|0, v = c === 'x' ? r : (r&0x3|0x8);
      return v.toString(16);
    });
  }
  let SID = localStorage.getItem(sidKey);
  if (!SID) { SID = uuid(); localStorage.setItem(sidKey, SID); }

  /* -------- Open / Close -------- */
  btnToggle.addEventListener('click', ()=> {
    panel.classList.add('open');
    requestAnimationFrame(()=> scrollToBottom(true));
    hideNewPill();
  });
  closeBtn.addEventListener('click', ()=> panel.classList.remove('open'));

  /* -------- Autoscroll helpers -------- */
  function distanceFromBottom() {
    return list.scrollHeight - (list.scrollTop + list.clientHeight);
  }
  function isNearBottom() {
    return distanceFromBottom() <= 48;
  }
  function scrollToBottom(force = false) {
    if (force || isNearBottom()) {
      list.scrollTop = list.scrollHeight;
    }
  }
  function showNewPill(){ newPill.style.display = 'inline-flex'; }
  function hideNewPill(){ newPill.style.display = 'none'; }

  newPill.addEventListener('click', () => {
    hideNewPill();
    scrollToBottom(true);
  });

  list.addEventListener('scroll', () => {
    if (isNearBottom()) hideNewPill();
  });

  /* -------- Rendering (prevent duplicates) -------- */
  const renderedIds = new Set(); // which messages have been rendered

  function appendBubble(text, sender, id, forceScroll = false){
    if (id && renderedIds.has(id)) return; // skip duplicates
    if (id) renderedIds.add(id);

    const b = document.createElement('div');
    b.className = sender === 'customer' ? 'oc-bubble oc-me' : 'oc-bubble oc-them';
    b.textContent = text;
    const shouldScroll = forceScroll || isNearBottom();
    list.appendChild(b);
    if (shouldScroll) scrollToBottom(true);
  }

  /* -------- Send (optimistic + register server id) -------- */
  async function sendMessage(){
    const msg = (input.value || '').trim();
    if(!msg) return;

    const localId = 'local-' + Date.now();     // temp id for dedupe
    appendBubble(msg, 'customer', localId, true);
    input.value = '';

    try {
      const res = await fetch(endpoint, {
        method: 'POST',
        headers: {'Content-Type':'application/json'},
        body: JSON.stringify({
          storeDomain: store,
          sessionId: SID,
          sender: 'customer',
          message: msg
        })
      });

      // IMPORTANT: read server response and register real id
      const data = await res.json().catch(()=>null);
      if (data && data.ok && data.message) {
        // mark server id as already rendered so next poll wonâ€™t duplicate
        if (data.message.id) renderedIds.add(data.message.id);
        if (data.message.createdAt) lastISO = data.message.createdAt;
      }
    } catch(e){
      console.warn('send error', e);
    }
  }
  sendBtn.addEventListener('click', sendMessage);
  input.addEventListener('keydown', e => { if(e.key === 'Enter') sendMessage(); });

  /* -------- Polling -------- */
  let lastISO = null;
  async function poll(){
    try {
      const url = new URL(endpoint);
      url.searchParams.set('storeDomain', store);
      url.searchParams.set('sessionId', SID);
      if(lastISO) url.searchParams.set('since', lastISO);

      const r = await fetch(url.toString());
      const data = await r.json();

      if(data && data.ok && Array.isArray(data.messages) && data.messages.length){
        const userWasNearBottom = isNearBottom();
        let appended = 0;

        data.messages.forEach(m => {
          // Use server id when available; fallback to createdAt
          const mid = m.id ?? m.createdAt;
          appendBubble(m.text, m.sender === 'customer' ? 'customer' : 'me', mid, false);
          lastISO = m.createdAt;
          appended++;
        });

        if (appended && !userWasNearBottom) {
          showNewPill();
        }
      }
    } catch(e){ console.warn(e); }
  }

  /* -------- Init -------- */
  (async function init(){
    const url = new URL(endpoint);
    url.searchParams.set('storeDomain', store);
    url.searchParams.set('sessionId', SID);
    const r = await fetch(url.toString());
    const data = await r.json();
    if(data && data.ok && Array.isArray(data.messages)){
      data.messages.forEach(m => {
        const mid = m.id ?? m.createdAt;
        appendBubble(m.text, m.sender === 'customer' ? 'customer' : 'me', mid, false);
      });
      if(data.messages.length) lastISO = data.messages[data.messages.length-1].createdAt;
      scrollToBottom(true);
    }
    setInterval(poll, 3000);
  })();
})();
</script>

</div>


{% schema %}
{
  "name": "Omni Chat Widget",
  "target": "section",
  "settings": [
    { "type": "text", "id": "header_title", "label": "Header title", "default": "Need help? Chat with us!" },
    { "type": "text", "id": "toggle_label", "label": "Floating button label", "default": "Chat" },
    { "type": "text", "id": "placeholder", "label": "Input placeholder", "default": "Type your messageâ€¦" },
    { "type": "color", "id": "header_bg", "label": "Header background", "default": "#111827" },
    { "type": "color", "id": "header_fg", "label": "Header text color", "default": "#ffffff" },
    { "type": "color", "id": "btn_bg", "label": "Send/Button background", "default": "#2563eb" },
    { "type": "color", "id": "btn_fg", "label": "Send/Button text", "default": "#ffffff" }
  ]
}
{% endschema %}
